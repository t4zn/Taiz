statements   : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement    : keyword:emit expr?
             | keyword:skip
             | keyword:pause
             | expr

expr         : keyword:cash IDENTIFIER EQ expr
             | comp-expr ((keyword:kiss | keyword:aka) comp-expr)*

comp-expr    : keyword:cap comp-expr
             | arith-expr ((EE | LT | GT | LTE | GTE) arith-expr)*

arith-expr   : term ((PLUS | MINUS) term)*

term         : factor ((MUL | DIV | MOD) factor)*

factor       : (PLUS | MINUS) factor
             : power

power        : call (POW factor)*

call         : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom         : INT | FLOAT | STRING | IDENTIFIER
             | LPAREN expr RPAREN
             | list-expr
             | if-expr
             | for-expr
             | while-expr
             | func-def

list-expr    : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr      : keyword:bet expr keyword:boom
               (statement if-expr-b | if-expr-c?)
             | (NEWLINE statements keyword:destroy | if-expr-b | if-expr-c)

if-expr-b    : keyword:maybe expr keyword:boom
               (statement if-expr-b | if-expr-c?)
             | (NEWLINE statements keyword:destroy | if-expr-b | if-expr-c)

if-expr-c    : keyword:bruh
               statement
             | (NEWLINE statements keyword:destroy)

for-expr     : keyword:cycle IDENTIFIER EQ expr keyword:to expr
               (keyword:jump expr)? keyword:boom
               statement
             | (NEWLINE statements keyword:destroy)

while-expr   : keyword:until expr keyword:boom
               statement
             | (NEWLINE statements keyword:destroy)

func-def     : keyword:taiz IDENTIFIER?
               LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
               (ARROW expr)
             | (NEWLINE statements keyword:destroy)
